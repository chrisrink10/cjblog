"""cjblog :: util module

Contains utility functions.

Author: Christopher Rink (chrisrink10 at gmail dot com)"""
import configparser
import markdown
import os

# Make sure we handle the variable path (especially with venvs)
_current_dir = os.path.dirname(os.path.realpath(__file__))
_ini_loc = os.path.join(_current_dir, 'config.ini')
_cfg_loc = os.path.join(_current_dir, 'config.py')

# These are some basic defaults, just in case we fail to get any value
defaults = {
    'main_title': '',
    'subtitle': '',
    'browser_title': '',
    'footer_text': '',
    'image_location': '#',
    'image_alt': '',
    'page_size': 5,
    'session_expire': 1800,
    'session_prune_age': 3600
}


def compile_configuration(data):
    """Compile a configuration file from database"""
    if not isinstance(data, (dict, type(None))):
        raise TypeError("Configuration information is required.")

    ini = configparser.ConfigParser()
    ini.read(_ini_loc)

    # Generate the compiled configuration dictionary
    compiled = {}
    for key in defaults.keys():
        compiled[key] = data[key] or defaults[key]
    compiled['secret_key'] = ini['CONFIG'].get("SECRET_KEY", os.urandom(32))

    # Create the text of the configuration file
    cfg = generate_configuration(ini['CONFIG']['DATABASE'],
                                 debug=ini.getboolean('CONFIG', 'DEBUG'),
                                 data=compiled)

    # Once we verified compilation is valid, save the file
    with open(_cfg_loc, 'w') as f:
        f.write(cfg)

    return


def generate_configuration(dbloc, debug=False, data=None, key=None):
    """
    Generate the text of the `config.py` file.

    Callers must specify the location of the database, `dbloc`.

    Optionally, specify that this instance of the blog will be run in
    `debug` mode. If no `data` dictionary is provided, the defaults
    will be selected. If the caller specifies a `key`, then that
    value will be used
    """
    # Specify default data (and key if not given)
    if data is None:
        data = defaults
        if key is None:
            data['secret_key'] = os.urandom(32)

    # Specify the custom key version
    if key is not None or 'secret_key' not in data:
        data["secret_key"] = key

    # Generate the configuration string
    cfg = str(
        '################################################################\n'
        '# Blog Configuration File\n'
        '#\n'
        '# DO NOT EDIT THIS FILE MANUALLY. You can modify the settings\n'
        '# by accessing the administration panel for this blog. This\n'
        '# file will be compiled by the software.\n'
        '#\n'
        '# This file exists to reduce database reads for commonly\n'
        '# accessed configuration information.\n'
        '################################################################\n'
        '# Configuration read from config.ini\n'
        'DEBUG = {debug}\n'
        'DATABASE = "{database}"\n'
        '\n'
        '# Page configuration\n'
        'MAIN_TITLE = "{main_title:s}"\n'
        'SUBTITLE = "{subtitle:s}"\n'
        'BROWSER_TITLE = "{browser_title:s}"\n'
        'FOOTER_TEXT = "{footer_text:s}"\n'
        'IMAGE_LOCATION = "{image_location:s}"\n'
        'IMAGE_ALT = "{image_alt:s}"\n'
        '\n'
        '# Page Size\n'
        'PAGE_SIZE = {page_size:d}\n'
        '\n'
        '# Session configuration\n'
        'SESSION_EXPIRE = {session_expire:d}\n'
        'SESSION_PRUNE_AGE = {session_prune_age:d}\n'
        '\n'
        "# App Secret key encrypts the user's session data\n"
        "SECRET_KEY = b'{secret_key:s}'\n"
    ).format(database=dbloc,
             debug=debug,
             **data)

    # Try to verify that we can compile this configuration before saving
    # and potentially crashing the application
    try:
        _ = compile(cfg, '<string>', 'exec')
    except (SyntaxError, TypeError):
        raise CompileError("Invalid Python code generated.")

    return cfg


def mkdown(text):
    """Common function to produce consistent Markdown output."""
    return markdown.markdown(text,
                             extensions=['smarty', 'codehilite'],
                             output_format="html5"
                             )


class CompileError(Exception):
    """Returned if we cannot compile the configuration script."""
    pass
