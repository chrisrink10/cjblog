"""cjblog :: util module

Contains utility functions.

Author: Christopher Rink (chrisrink10 at gmail dot com)"""
import configparser
import markdown
import os

# Make sure we handle the variable path (especially with venvs)
_current_dir = os.path.dirname(os.path.realpath(__file__))
_ini_loc = os.path.join(_current_dir, 'config.ini')
_cfg_loc = os.path.join(_current_dir, 'config.py')

# These are some basic defaults, just in case we fail to get any value
defaults = {
    'main_title': '',
    'subtitle': '',
    'browser_title': '',
    'footer_text': '',
    'image_location': '#',
    'image_alt': '',
    'page_size': 5,
    'session_expire': 1800,
    'session_prune_age': 3600
}


def compile_configuration(data):
    """Compile a configuration file from database"""
    if not isinstance(data, (dict, type(None))):
        raise TypeError("Configuration information is required.")

    ini = configparser.ConfigParser()
    ini.read(_ini_loc)

    compiled = {
        'main_title': data['main_title'] or defaults['main_title'],
        'subtitle': data['subtitle'] or defaults['subtitle'],
        'browser_title': data['browser_title'] or defaults['browser_title'],
        'footer_text': data['footer_text'] or defaults['footer_text'],
        'image_location': data['image_location'] or defaults['image_location'],
        'image_alt': data['image_alt'] or defaults['image_alt'],
        'page_size': data['page_size'] or defaults['page_size'],
        'session_expire': data['session_expire'] or defaults['session_expire'],
        'session_prune_age': data['session_prune_age'] or defaults['session_prune_age'],
        'secret_key': ini['CONFIG'].get("SECRET_KEY", os.urandom(32))
    }
    cfg = str(
        '################################################################\n'
        '# Blog Configuration File\n'
        '#\n'
        '# DO NOT EDIT THIS FILE MANUALLY. You can modify the settings\n'
        '# by accessing the administration panel for this blog. This\n'
        '# file will be compiled by the software.\n'
        '#\n'
        '# This file exists to reduce database reads for commonly\n'
        '# accessed configuration information.\n'
        '################################################################\n'
        '# Configuration read from config.ini\n'
        'DEBUG = {debug}\n'
        'DATABASE = "{database}"\n'
        '\n'
        '# Page configuration\n'
        'MAIN_TITLE = "{main_title:s}"\n'
        'SUBTITLE = "{subtitle:s}"\n'
        'BROWSER_TITLE = "{browser_title:s}"\n'
        'FOOTER_TEXT = "{footer_text:s}"\n'
        'IMAGE_LOCATION = "{image_location:s}"\n'
        'IMAGE_ALT = "{image_alt:s}"\n'
        '\n'
        '# Page Size\n'
        'PAGE_SIZE = {page_size:d}\n'
        '\n'
        '# Session configuration\n'
        'SESSION_EXPIRE = {session_expire:d}\n'
        'SESSION_PRUNE_AGE = {session_prune_age:d}\n'
        '\n'
        "# App Secret key encrypts the user's session data\n"
        "SECRET_KEY = b'{secret_key:s}'\n"
    ).format(database=ini['CONFIG']['DATABASE'],
             debug=ini.getboolean('CONFIG', 'DEBUG'),
             **compiled)

    # Try to verify that we can compile this configuration before saving
    # and potentially crashing the application
    try:
        _ = compile(cfg, '<string>', 'exec')
    except (SyntaxError, TypeError):
        raise CompileError("Invalid Python code generated.")

    # Once we verified compilation is valid, save the file
    with open(_cfg_loc, 'w') as f:
        f.write(cfg)

    return


def mkdown(text):
    """Common function to produce consistent Markdown output."""
    return markdown.markdown(text,
                             extensions=['smarty', 'codehilite'],
                             output_format="html5"
                             )


class CompileError(Exception):
    """Returned if we cannot compile the configuration script."""
    pass
